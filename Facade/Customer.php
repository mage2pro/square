<?php
namespace Dfe\Square\Facade;
use Df\API\Operation;
use Dfe\Square\API\Facade\Card;
use Dfe\Square\API\Facade\Customer as C;
use Dfe\Square\Method as M;
use Dfe\Square\P\Address;
/**
 * 2017-10-08 «Connect API v2 Reference» → «Endpoints» → «Customers»
 * https://docs.connect.squareup.com/api/connect/v2#navsection-customers
 * 2017-10-09 «Connect API v2 Reference» → «Data Types» → «Customer»
 * https://docs.connect.squareup.com/api/connect/v2#type-customer
 * @method M m()
 */
final class Customer extends \Df\StripeClone\Facade\Customer {
	/**
	 * 2017-10-10 Square supports a card saving, but requires an additional step to do it.
	 * @override
	 * @see \Df\StripeClone\Facade\Customer::addCardInASeparateStepForNewCustomers()
	 * @used-by \Df\StripeClone\Payer::newCard()
	 */
	function addCardInASeparateStepForNewCustomers():bool {return true;}

	/**
	 * 2017-10-08 «Connect API v2 Reference» → «Endpoints» → «Customers» → «CreateCustomerCard»
	 * https://docs.connect.squareup.com/api/connect/v2#endpoint-createcustomercard
	 * 2017-10-10 The result looks like: «82e66bb3-36ab-51cd-45e7-f9f251c73b08».
	 * «[Square] An example of a response to `POST /v2/customers/{customer_id}/cards`»: https://mage2.pro/t/4652
	 * 2022-12-19 We can not declare the $c argument type because it is undeclared in the overriden method.
	 * @override
	 * @see \Df\StripeClone\Facade\Customer::cardAdd()
	 * @used-by \Df\StripeClone\Payer::newCard()
	 * @param Operation $c
	 */
	function cardAdd($c, string $token):string {/** @var M $m */$m = $this->m(); return (new Card($c['id']))->post([
		/**
		 * 2017-10-08
		 * Note 1. «Address information for the card on file.
		 * Only the postal_code field is required for payments in the US and Canada.»
		 * Type: string.
		 * Note 2. «Connect API v2 Reference» → «Data Types» → «Address»
		 * https://docs.connect.squareup.com/api/connect/v2#type-address
		 */
		'billing_address' => [
			/**
			 * 2017-10-08 «The address's postal code». Type: string.
			 * 2017-10-09
			 * I intentionally use the postal code from the Square's payment form,
			 * not from the Magento billing address,
			 * because Square requires a postal code,
			 * whereas a Magento's billing address can be without a postal code.
			 */
			'postal_code' => $m->postalCode()
		] + Address::sg()->billing()
		/**
		 * 2017-10-08
		 * «A card nonce representing the credit card to link to the customer.
		 * Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into.
		 * See «Embedding the payment form» for more information:
		 * https://docs.connect.squareup.com/articles/adding-payment-form »
		 * Type: string. Required.
		 */
		,'card_nonce' => $token
		# 2017-10-08 «The cardholder's name». Type: string. Optional.
		,'cardholder_name' => $m->cardholder()
	])['id'];}

	/**
	 * 2017-10-08
	 * @override
	 * @see \Df\StripeClone\Facade\Customer::create()
	 * @used-by \Df\StripeClone\Payer::newCard()
	 * @param array(string => mixed) $p
	 */
	function create(array $p):Operation {return C::s()->post($p);}

	/**
	 * 2017-10-08 A result looks like `JDKYHBWT1D4F8MFH63DBMEN8Y4`.
	 * @override
	 * @see \Df\StripeClone\Facade\Customer::id()
	 * @used-by \Df\StripeClone\Payer::newCard()
	 * @param Operation $c
	 */
	function id($c):string {return $c['id'];}

	/**
	 * 2017-10-08
	 * 2017-10-09
	 * If the customer with $id ia absent, we will get an exception like:
	 * 		{
	 *			"category": "INVALID_REQUEST_ERROR",
	 *			"code": "NOT_FOUND",
	 *			"detail": "Customer with ID `111` not found."
	 *		}
	 * We will return null in this case.
	 * @see \Dfe\Square\Test\CaseT\Customer::t02_get()
	 * @override
	 * @see \Df\StripeClone\Facade\Customer::_get()
	 * @used-by \Df\StripeClone\Facade\Customer::get()
	 * @param string $id
	 * @return Operation|null
	 */
	protected function _get($id) {return df_try(function() use($id) {return (new C)->get($id);});}

	/** 
	 * 2017-10-09
	 * `cards`: «The non-confidential details of the customer's cards on file»
	 * «Connect API v2 Reference» → «Data Types» → «Customer»
	 * https://docs.connect.squareup.com/api/connect/v2#type-customer
	 * 2018-12-04
	 * The `cards` key can be absent:
	 * https://github.com/mage2pro/core/issues/83
	 * «array_map(): Argument #2 should be an array
	 * in vendor/mage2pro/core/StripeClone/Facade/Customer.php on line 149».
	 * An example of a $c object without `cards`:
	 *	{
	 *		"address": {
	 *			"address_line_1": "4705 Rue Saint-Laurent",
	 *			"administrative_district_level_1": "Quebec",
	 *			"country": "CA",
	 *			"locality": "Sorel",
	 *			"postal_code": "J3R5S8"
	 *		},
	 *		"company_name": "Paille chevrolet sorel tracy ",
	 *		"created_at": "2018-11-24T00:04:56.002Z",
	 *		"creation_source": "THIRD_PARTY",
	 *		"email_address": "<...>",
	 *		"family_name": "<...>",
	 *		"given_name": "philippe",
	 *		"id": "P08A11D3PD4EBDD5ZNG50PHDRM",
	 *		"note": "<...>",
	 *		"phone_number": "5149982307",
	 *		"preferences": {
	 *			"email_unsubscribed": false
	 *		},
	 *		"updated_at": "2018-11-24T00:04:56Z"
	 *	}
	 * @override
	 * @see \Df\StripeClone\Facade\Customer::cardsData()
	 * @used-by \Df\StripeClone\Facade\Customer::cards()
	 * @param Operation $c
	 * @return array(array(string => string))
	 */
	protected function cardsData($c):array {return df_eta($c['cards']);}
}